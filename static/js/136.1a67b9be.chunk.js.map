{"version":3,"file":"static/js/136.1a67b9be.chunk.js","mappings":"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","sources":["webpack://nola/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","webpack://nola/./src/components/GoBackButton/GoBackButton.module.css?1091","components/GoBackButton/GoBackButton.jsx","webpack://nola/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","webpack://nola/./src/components/RecoveryForm/RecoveryForm.module.css?230e","components/RecoveryForm/RecoveryForm.jsx","pages/RecoveryPage/RecoveryPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"buttonForm\":\"Button_buttonForm__X-24B\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport css from \"./Button.module.css\";\r\n\r\nconst Button = ({ label, onClick, disabled }) => {\r\n  return (\r\n    <button className={css.buttonForm} onClick={onClick} disabled={disabled}>\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"goBack\":\"GoBackButton_goBack__sMPM4\",\"titleRecovery\":\"GoBackButton_titleRecovery__jxfe9\"};","/* eslint-disable react/prop-types */\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport css from \"./GoBackButton.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GoBackButton = ({\r\n  to,\r\n  title,\r\n  imgSrc,\r\n  imgAlt,\r\n  imgWidth,\r\n  imgHeight,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <div className={css.goBack}>\r\n      <Link to={to} onClick={onClick}>\r\n        <img src={imgSrc} alt={imgAlt} width={imgWidth} height={imgHeight} />\r\n      </Link>\r\n      <h3 className={css.titleRecovery}>{title}</h3>\r\n    </div>\r\n  );\r\n};\r\nGoBackButton.propTypes = {\r\n  to: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  imgSrc: PropTypes.string.isRequired,\r\n  imgAlt: PropTypes.string.isRequired,\r\n  imgWidth: PropTypes.number,\r\n  imgHeight: PropTypes.number,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default GoBackButton;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"Modal_backdrop__2bCFe\",\"modal\":\"Modal_modal__RKlRu\",\"svg\":\"Modal_svg__dYdNt\"};","import css from \"./Modal.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Modal = ({ children, handleToggleModal }) => {\r\n  const handleCloseBackdrop = (e) => {\r\n    const { target, currentTarget } = e;\r\n    if (target === currentTarget) {\r\n      handleToggleModal();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={css.backdrop} onClick={handleCloseBackdrop}>\r\n      <div className={css.modal}>\r\n        <div>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nModal.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  handleToggleModal: PropTypes.func.isRequired,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"RecoveryForm_formContainer__xywet\",\"imageForm\":\"RecoveryForm_imageForm__tgJ2R\",\"titleForm\":\"RecoveryForm_titleForm__ARL8p\",\"infoForm\":\"RecoveryForm_infoForm__lbOCF\",\"inputForm\":\"RecoveryForm_inputForm__wMh5B\",\"goBack\":\"RecoveryForm_goBack__2JgZx\",\"titleRecovery\":\"RecoveryForm_titleRecovery__aZ51F\",\"inputContainer\":\"RecoveryForm_inputContainer__3qUSd\",\"errorText\":\"RecoveryForm_errorText__zr4ma\"};","import React, { useState } from \"react\";\r\nimport { Modal } from \"../../components/Modal/Modal\";\r\nimport Button from \"../Button\";\r\nimport css from \"./RecoveryForm.module.css\";\r\nimport * as yup from \"yup\";\r\nimport email from \"../../assets/images/email.jpg\";\r\nimport back from \"../../assets/images/back.jpg\";\r\nimport GoBackButton from \"../GoBackButton/GoBackButton\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst schema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .matches(/^[^\\s]*$/, \"Please enter valid characters\")\r\n    .matches(/^[^а-яА-ЯіІїЇєЄ]*$/, \"Please enter valid characters\")\r\n    .matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Please enter a valid email address\")\r\n    .required(\"Email is required\"),\r\n});\r\n\r\nconst RecoveryForm = () => {\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [isModal, setIsModal] = useState(false);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n    setErrors({\r\n      ...errors,\r\n      [name]: \"\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    schema\r\n      .validate(formData, { abortEarly: false })\r\n      .then(() => {\r\n        console.log(\"Form submitted with data:\", formData);\r\n        handleToggleModal();\r\n        setFormData({\r\n          email: \"\",\r\n        });\r\n      })\r\n      .catch((validationErrors) => {\r\n        const newErrors = {};\r\n        validationErrors.inner.forEach((error) => {\r\n          newErrors[error.path] = error.message;\r\n        });\r\n        setErrors(newErrors);\r\n      });\r\n  };\r\n\r\n  const handleBlur = async (field) => {\r\n    try {\r\n      await schema.validateAt(field, formData);\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        [field]: \"\",\r\n      }));\r\n    } catch (validationError) {\r\n      if (!validationError.message) {\r\n        setErrors((prevErrors) => ({\r\n          ...prevErrors,\r\n          [field]: \"Invalid value\",\r\n        }));\r\n      } else {\r\n        setErrors((prevErrors) => ({\r\n          ...prevErrors,\r\n          [field]: validationError.message,\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleToggleModal = () => {\r\n    setIsModal((prev) => !prev);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    navigate(-1);\r\n  };\r\n\r\n  const getBorderColor = (field) => {\r\n    return errors[field] ? \"#ff0000\" : \"#9e9e9e\";\r\n  };\r\n\r\n  return (\r\n    <div className={css.formContainer}>\r\n      <GoBackButton\r\n        imgSrc={back}\r\n        imgAlt=\"Go back\"\r\n        imgWidth=\"50px\"\r\n        imgHeight=\"50px\"\r\n        title=\"Password recovery\"\r\n        onClick={handleBack}\r\n      />\r\n      <img src={email} alt=\"Logo\" className={css.imageForm} />\r\n      <h3 className={css.titleForm}>Update your password</h3>\r\n      <p className={css.infoForm}>\r\n        Enter your email address and select Send Email\r\n      </p>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <div className={css.inputContainer}>\r\n          {errors.email && <div className={css.errorText}>{errors.email}</div>}\r\n          <input\r\n            className={css.inputForm}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            value={formData.email}\r\n            onChange={handleInputChange}\r\n            onBlur={() => handleBlur(\"email\")}\r\n            style={{ borderColor: getBorderColor(\"email\") }}\r\n          />\r\n        </div>\r\n        <Button label=\"Send email\" type=\"submit\" />\r\n      </form>\r\n\r\n      {isModal && (\r\n        <Modal\r\n          handleToggleModal={handleToggleModal}\r\n          navigatePage={\"/recoverPasswordPage\"}\r\n        >\r\n          <p>Send a new password to email</p>\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecoveryForm;\r\n","import RecoveryForm from \"../../components/RecoveryForm\";\r\n\r\nconst RecoveryPage = () => {\r\n  return (\r\n    <div>\r\n      <RecoveryForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecoveryPage;\r\n"],"names":["_ref","label","onClick","disabled","_jsx","className","css","children","to","title","imgSrc","imgAlt","imgWidth","imgHeight","_jsxs","Link","src","alt","width","height","Modal","handleToggleModal","e","target","currentTarget","schema","yup","shape","email","matches","required","RecoveryForm","navigate","useNavigate","formData","setFormData","useState","errors","setErrors","isModal","setIsModal","prev","GoBackButton","back","handleBack","onSubmit","preventDefault","validate","abortEarly","then","console","log","catch","validationErrors","newErrors","inner","forEach","error","path","message","type","name","placeholder","value","onChange","onBlur","async","validateAt","field","prevErrors","validationError","handleBlur","style","borderColor","Button","navigatePage","RecoveryPage"],"sourceRoot":""}