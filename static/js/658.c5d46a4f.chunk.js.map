{"version":3,"file":"static/js/658.c5d46a4f.chunk.js","mappings":"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","sources":["../node_modules/src/observe.ts","../node_modules/src/InView.tsx","webpack://nola/./src/components/Posts/Posts.module.css?b837","../node_modules/color.js/dist/color.esm.js","components/Posts/Posts.jsx","../node_modules/src/useInView.tsx","pages/MainPage/MainPage.jsx","services/ToastError/ToastError.js","services/Toastify/Toastify.js"],"sourcesContent":["import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"Posts_img__Nl3kO\",\"card\":\"Posts_card__GhwqZ\",\"action\":\"Posts_action__OR1Gq\"};","var getSrc = item => typeof item === 'string' ? item : item.src;\n\nvar getArgs = ({\n  amount = 3,\n  format = 'array',\n  group = 20,\n  sample = 10\n} = {}) => ({\n  amount,\n  format,\n  group,\n  sample\n});\n\nvar format = (input, args) => {\n  var list = input.map(val => {\n    var rgb = Array.isArray(val) ? val : val.split(',').map(Number);\n    return args.format === 'hex' ? rgbToHex(rgb) : rgb;\n  });\n  return args.amount === 1 || list.length === 1 ? list[0] : list;\n};\n\nvar group = (number, grouping) => {\n  var grouped = Math.round(number / grouping) * grouping;\n  return Math.min(grouped, 255);\n};\n\nvar rgbToHex = rgb => '#' + rgb.map(val => {\n  var hex = val.toString(16);\n  return hex.length === 1 ? '0' + hex : hex;\n}).join('');\n\nvar getImageData = src => new Promise((resolve, reject) => {\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  var img = new Image();\n\n  img.onload = () => {\n    canvas.height = img.height;\n    canvas.width = img.width;\n    context.drawImage(img, 0, 0);\n    var data = context.getImageData(0, 0, img.width, img.height).data;\n    resolve(data);\n  };\n\n  img.onerror = () => reject(Error('Image loading failed.'));\n\n  img.crossOrigin = '';\n  img.src = src;\n});\n\nvar getAverage = (data, args) => {\n  var gap = 4 * args.sample;\n  var amount = data.length / gap;\n  var rgb = {\n    r: 0,\n    g: 0,\n    b: 0\n  };\n\n  for (var i = 0; i < data.length; i += gap) {\n    rgb.r += data[i];\n    rgb.g += data[i + 1];\n    rgb.b += data[i + 2];\n  }\n\n  return format([[Math.round(rgb.r / amount), Math.round(rgb.g / amount), Math.round(rgb.b / amount)]], args);\n};\n\nvar getProminent = (data, args) => {\n  var gap = 4 * args.sample;\n  var colors = {};\n\n  for (var i = 0; i < data.length; i += gap) {\n    var rgb = [group(data[i], args.group), group(data[i + 1], args.group), group(data[i + 2], args.group)].join();\n    colors[rgb] = colors[rgb] ? colors[rgb] + 1 : 1;\n  }\n\n  return format(Object.entries(colors).sort(([_keyA, valA], [_keyB, valB]) => valA > valB ? -1 : 1).slice(0, args.amount).map(([rgb]) => rgb), args);\n};\n\nvar process = (handler, item, args) => new Promise((resolve, reject) => getImageData(getSrc(item)).then(data => resolve(handler(data, getArgs(args)))).catch(error => reject(error)));\n\nvar average = (item, args) => process(getAverage, item, args);\n\nvar prominent = (item, args) => process(getProminent, item, args);\n\nexport { average, prominent };\n","import { useInView } from \"react-intersection-observer\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport css from \"./Posts.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport {  prominent } from \"color.js\";\r\n\r\nconst LOKAL_KEY = \"savedPost\";\r\n\r\nexport const Posts = ({ id, url, title, handleSavePost }) => {\r\n  const { ref, inView } = useInView({\r\n    threshold: 0.5,\r\n    triggerOnce: true,\r\n  });\r\n\r\n  const [getColor, setGetColor] = useState(\"\");\r\n  const [getBackColor, setGetBackColor] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    prominent(url, { format: \"hex\" })\r\n    .then(color => {\r\n      setGetColor(color[2]) \r\n      setGetBackColor(color[0])\r\n    })\r\n      .catch((error) => console.log(error));\r\n  }, [url]);\r\n\r\n  return (\r\n    <li ref={ref} className={`${css.card} ${css.container}`}>\r\n      {inView && (\r\n        <>\r\n          <div>\r\n            <h3>{title}</h3>\r\n            <div className={css.post_header}>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => handleSavePost(id)}\r\n                className={css.save_btn}\r\n              >\r\n                SAVE\r\n              </button>\r\n            </div>\r\n\r\n            <NavLink to={`${id}`} className={css.link}>\r\n              <img src={url} alt=\"\" className={css.img} />\r\n              <div className={css.description}></div>\r\n\r\n              <div>\r\n                <div\r\n                  className={css.action}\r\n                  style={{\r\n                    backgroundColor: getBackColor ? getBackColor : \"#faf5f5\",\r\n                    color: getColor ? getColor : \"#080808\"\r\n                  }}\r\n                >\r\n                  Learn more\r\n                </div>\r\n              </div>\r\n            </NavLink>\r\n          </div>\r\n        </>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nPosts.propTypes = {\r\n  url: PropTypes.string,\r\n  title: PropTypes.string,\r\n  id: PropTypes.string,\r\n  handleSavePost: PropTypes.func,\r\n};\r\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import { NavLink } from \"react-router-dom\";\r\nimport css from \"./MainPage.module.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Toastify } from \"../../services/Toastify/Toastify\";\r\nimport { ToastError } from \"../../services/ToastError/ToastError\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Posts } from \"../../components/Posts/Posts\";\r\nimport { getAllPostApi } from \"../../services/https/https\";\r\n\r\nconst LOKAL_KEY = \"savedPost\";\r\n\r\nconst MainPage = () => {\r\n  const [posts, setPost] = useState(() => {\r\n    return JSON.parse(localStorage.getItem(LOKAL_KEY)) ?? \"\";\r\n  });\r\n\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    const fetchData = (async () => {\r\n      try {\r\n        const { data } = await getAllPostApi();\r\n        console.log(data);\r\n        setData(data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setLoading(false);\r\n        ToastError(\"Error! Try later\");\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(LOKAL_KEY, JSON.stringify(posts));\r\n  }, [posts]);\r\n\r\n  const handleSavePost = (savedId) => {\r\n    const savedPost = data.filter(({ id }) => id === savedId);\r\n    if (posts) {\r\n      const savedValid = posts.find((post) => post.id === savedId);\r\n      if (savedValid) {\r\n        ToastError(\"This post has already been saved\");\r\n        return;\r\n      }\r\n      Toastify(\"Post successfully saved\");\r\n    }\r\n\r\n    setPost((prev) => [...prev, ...savedPost]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.removeItem(\"pathname\");\r\n  }, []);\r\n\r\n  const handleSetting = () => {\r\n    localStorage.setItem(\"pathname\", \"/main\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer />\r\n      <NavLink to=\"setting\">\r\n        <button type=\"button\" onClick={handleSetting}>\r\n          Setting\r\n        </button>\r\n      </NavLink>\r\n\r\n      {loading && <h2>LOADING...</h2>}\r\n      <ul>\r\n        {data.map(({ id, title, banners }) => (\r\n          <Posts\r\n            key={id}\r\n            data={data}\r\n            url={banners}\r\n            title={title}\r\n            id={id}\r\n            handleSavePost={handleSavePost}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const ToastError = (message) => {\r\n  toast.error(`${message}`, {\r\n    position: \"top-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n    theme: \"light\",\r\n  });\r\n};\r\n","import { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport const Toastify = (message) => {\r\n  toast(`${message}`, {\r\n    position: \"top-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n    theme: \"light\",\r\n  });\r\n};\r\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","format","input","args","list","val","rgb","split","Number","rgbToHex","amount","group","number","grouping","grouped","Math","round","min","hex","join","getProminent","data","gap","sample","colors","i","_ref","_ref2","_keyA","valA","_keyB","valB","slice","_ref3","process","handler","item","Promise","resolve","reject","getImageData","src","getSrc","canvas","document","createElement","context","getContext","img","Image","onload","height","width","drawImage","onerror","Error","crossOrigin","then","getArgs","catch","error","Posts","url","title","handleSavePost","ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","useInView","getColor","setGetColor","useState","getBackColor","setGetBackColor","useEffect","prominent","color","console","log","_jsx","className","css","card","container","children","_Fragment","_jsxs","post_header","type","onClick","save_btn","NavLink","to","link","alt","description","action","style","backgroundColor","LOKAL_KEY","MainPage","posts","setPost","_JSON$parse","JSON","parse","localStorage","getItem","setData","loading","setLoading","getAllPostApi","ToastError","setItem","stringify","savedId","savedPost","find","post","Toastify","prev","removeItem","ToastContainer","handleSetting","banners","message","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","theme"],"sourceRoot":""}