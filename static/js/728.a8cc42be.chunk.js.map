{"version":3,"file":"static/js/728.a8cc42be.chunk.js","mappings":"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","sources":["assets/icons/circle-exclamation-mark.svg","webpack://nola/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","webpack://nola/./src/components/GoogleButton/GoogleAndAppleButton.module.css?1a24","components/GoogleButton/GoogleAndAppleButton.jsx","webpack://nola/./src/components/RegistrationForm/RegistrationForm.module.css?5637","components/RegistrationForm/RegistrationForm.jsx","pages/RegistrationPage/RegistrationPage.jsx","services/ToastError/ToastError.js","services/Toastify/Toastify.js"],"sourcesContent":["var _path, _circle, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCircleExclamationMark(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 10.0067V10\",\n    stroke: \"#DA2E2E\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 8.00008,\n    cy: 8.00008,\n    r: 4.83333,\n    stroke: \"#DA2E2E\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 6V8.33333\",\n    stroke: \"#DA2E2E\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCircleExclamationMark);\nexport default __webpack_public_path__ + \"static/media/circle-exclamation-mark.17ba79873a47e9a43cf4f3584ca4f5b5.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"buttonForm\":\"Button_buttonForm__X-24B\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport css from \"./Button.module.css\";\r\n\r\nconst Button = ({ label, onClick, disabled }) => {\r\n  return (\r\n    <button className={css.buttonForm} onClick={onClick} disabled={disabled}>\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonContainer\":\"GoogleAndAppleButton_buttonContainer__zj53l\",\"buttonForm\":\"GoogleAndAppleButton_buttonForm__oc1w0\",\"separatorLine\":\"GoogleAndAppleButton_separatorLine__cnFHu\",\"orText\":\"GoogleAndAppleButton_orText__Z9Coz\",\"icon\":\"GoogleAndAppleButton_icon__lP+55\"};","import React from \"react\";\r\nimport { FaApple } from \"react-icons/fa\";\r\nimport { FcGoogle } from \"react-icons/fc\";\r\nimport css from \"./GoogleAndAppleButton.module.css\";\r\n\r\nconst GoogleAndAppleButton = () => {\r\n  const handleContinueWithApple = () => {\r\n    console.log(\"Continue with Apple clicked\");\r\n  };\r\n\r\n  const handleContinueWithGoogle = () => {\r\n    console.log(\"Continue with Google clicked\");\r\n  };\r\n\r\n  return (\r\n    <div className={css.buttonContainer}>\r\n      <div className={css.separatorLine}></div>\r\n      <div className={`${css.orText} dark:bg-black`}>or</div>\r\n\r\n      <button className={css.buttonForm} onClick={handleContinueWithApple}>\r\n        <FaApple className={css.icon} />\r\n        Continue with Apple\r\n      </button>\r\n\r\n      <button className={css.buttonForm} onClick={handleContinueWithGoogle}>\r\n        <FcGoogle className={css.icon} />\r\n        Continue with Google\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleAndAppleButton;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"inputForm\":\"RegistrationForm_inputForm__0Pd3p\",\"textInfo\":\"RegistrationForm_textInfo__qppjF\",\"spanPolicy\":\"RegistrationForm_spanPolicy__WZvgi\",\"inputContainer\":\"RegistrationForm_inputContainer__Xna0O\",\"passwordInputContainer\":\"RegistrationForm_passwordInputContainer__Nbmix\",\"img_error\":\"RegistrationForm_img_error__m0hRd\",\"eyeIcon\":\"RegistrationForm_eyeIcon__csh0a\",\"error\":\"RegistrationForm_error__2sOV-\",\"errorText\":\"RegistrationForm_errorText__2xzzs\",\"btn_text\":\"RegistrationForm_btn_text__CE04u\",\"btn_valid\":\"RegistrationForm_btn_valid__lRJ-N\"};","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport css from \"./RegistrationForm.module.css\";\r\nimport Button from \"../Button\";\r\nimport { FaEye, FaEyeSlash } from \"react-icons/fa\";\r\nimport * as yup from \"yup\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { ToastError } from \"../../services/ToastError/ToastError\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { registerThunk } from \"../../redux/auth/authThunk\";\r\nimport { Toastify } from \"../../services/Toastify/Toastify\";\r\nimport error from \"../../assets/icons/circle-exclamation-mark.svg\";\r\n\r\nconst schema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .matches(/^[^\\s]*$/, \"Please enter valid characters\")\r\n    .matches(/^[^а-яА-ЯіІїЇєЄ]*$/, \"Please enter valid characters\")\r\n    .matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Please enter a valid email address\")\r\n    .required(\"Email is required\"),\r\n  password: yup\r\n    .string()\r\n    .required(\"Password is required\")\r\n    .min(8, \"Password must be at least 8 characters\"),\r\n  confirmPassword: yup\r\n    .string()\r\n    .required(\"Confirm Password is required\")\r\n    .min(8, \"Confirm Password must be at least 8 characters\")\r\n    .oneOf([yup.ref(\"password\"), null], \"Passwords must match\"),\r\n});\r\n\r\nconst RegistrationForm = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [validForm, setValidForm] = useState(false);\r\n\r\n  useEffect(() => {}, [errors]);\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n    setErrors({\r\n      ...errors,\r\n      [name]: \"\",\r\n    });\r\n    if (\r\n      formData?.email?.length !== 0 &&\r\n      formData?.password?.length > 6 &&\r\n      formData?.confirmPassword?.length > 6 &&\r\n      errors?.email?.length === 0 &&\r\n      errors?.password?.length === 0 &&\r\n      errors?.confirmPassword?.length === 0\r\n    ) {\r\n      setValidForm(true);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleTogglePassword = (field) => {\r\n    if (field === \"password\") {\r\n      setShowPassword(!showPassword);\r\n    } else if (field === \"confirmPassword\") {\r\n      setShowConfirmPassword(!showConfirmPassword);\r\n    }\r\n  };\r\n\r\n  const handleBlur = async (field) => {\r\n    try {\r\n      await schema.validateAt(field, formData);\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        [field]: \"\",\r\n      }));\r\n    } catch (validationError) {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        [field]: validationError.message,\r\n      }));\r\n      setValidForm(false);\r\n    }\r\n  };\r\n\r\n  const getBorderColor = (field) => {\r\n    return errors[field] && \"#ff0000\";\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    schema\r\n      .validate(formData, { abortEarly: false })\r\n      .then(async () => {\r\n        console.log(\"Form submitted with data:\", formData);\r\n\r\n        try {\r\n          await dispatch(registerThunk(formData)).unwrap();\r\n          Toastify(\"Registration sucsessfull\");\r\n          navigate(\"/main/accountAdverticer\");\r\n        } catch (error) {\r\n          ToastError(error);\r\n        }\r\n        setFormData({\r\n          email: \"\",\r\n          password: \"\",\r\n          confirmPassword: \"\",\r\n        });\r\n        setErrors({});\r\n        setValidForm(false);\r\n      })\r\n      .catch((validationErrors) => {\r\n        const errorsMap = {};\r\n        validationErrors.inner.forEach((error) => {\r\n          errorsMap[error.path] = error.message;\r\n        });\r\n        setErrors(errorsMap);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer />\r\n      <form onSubmit={handleSubmit}>\r\n        <div className={css.inputContainer}>\r\n          {errors.email && <div className={css.errorText}>{errors.email}</div>}\r\n          <input\r\n            className={css.inputForm}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            value={formData.email}\r\n            onChange={handleInputChange}\r\n            onBlur={() => handleBlur(\"email\")}\r\n            style={{\r\n              borderColor: getBorderColor(\"email\"),\r\n              color: getBorderColor(\"email\"),\r\n            }}\r\n          />\r\n\r\n          {errors?.email?.length > 1 ? (\r\n            <img src={error} alt=\"\" className={css.img_error} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n\r\n        <div className={css.inputContainer}>\r\n          {errors.password && (\r\n            <div className={css.errorText}>{errors.password}</div>\r\n          )}\r\n          <div className={css.passwordInputContainer}>\r\n            <input\r\n              className={`${css.inputForm} ${css.passwordInput}`}\r\n              type={showPassword ? \"text\" : \"password\"}\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              value={formData.password}\r\n              onChange={handleInputChange}\r\n              onBlur={() => handleBlur(\"password\")}\r\n              style={{\r\n                borderColor: getBorderColor(\"password\"),\r\n                color: getBorderColor(\"password\"),\r\n              }}\r\n            />\r\n\r\n            <div\r\n              className={`${css.eyeIcon} ${\r\n                errors?.password?.length > 1 ? css.error : \"\"\r\n              }`}\r\n              onClick={() => handleTogglePassword(\"password\")}\r\n            >\r\n              {showPassword ? <FaEyeSlash /> : <FaEye />}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={css.inputContainer}>\r\n          {errors.confirmPassword && (\r\n            <div className={css.errorText}>{errors.confirmPassword}</div>\r\n          )}\r\n          <div className={css.passwordInputContainer}>\r\n            <input\r\n              className={`${css.inputForm} ${css.passwordInput}`}\r\n              type={showConfirmPassword ? \"text\" : \"password\"}\r\n              name=\"confirmPassword\"\r\n              placeholder=\"Confirm Password\"\r\n              value={formData.confirmPassword}\r\n              onChange={handleInputChange}\r\n              onBlur={() => handleBlur(\"confirmPassword\")}\r\n              style={{\r\n                borderColor: getBorderColor(\"confirmPassword\"),\r\n                color: getBorderColor(\"confirmPassword\"),\r\n              }}\r\n            />\r\n\r\n            <div\r\n              className={`${css.eyeIcon} ${\r\n                errors?.confirmPassword?.length > 1 ? css.error : \"\"\r\n              }`}\r\n              onClick={() => handleTogglePassword(\"confirmPassword\")}\r\n            >\r\n              {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <p className={css.textInfo}>\r\n          *By clicking the Register button, I agree to the\r\n          <span className={css.spanPolicy}>Privacy Policy</span> and give my\r\n          consent to data processing\r\n        </p>\r\n        <div className={`${css.btn_text} ${validForm ? css.btn_valid : \"\"}`}>\r\n          <Button label=\"Register\" type=\"submit\" />\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegistrationForm;\r\n","import RegistrationForm from \"../../components/RegistrationForm\";\r\nimport GoogleAndAppleButton from \"../../components/GoogleButton/GoogleAndAppleButton\";\r\n\r\nconst RegistrationPage = () => {\r\n  return (\r\n    <div className=\"\">\r\n      <RegistrationForm />\r\n      <GoogleAndAppleButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegistrationPage;\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const ToastError = (message) => {\r\n  toast.error(`${message}`, {\r\n    position: \"top-center\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n    theme: \"light\",\r\n  });\r\n};\r\n","import { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport const Toastify = (message) => {\r\n  toast(`${message}`, {\r\n    position: \"top-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n    theme: \"light\",\r\n  });\r\n};\r\n"],"names":["_ref","label","onClick","disabled","_jsx","className","css","children","GoogleAndAppleButton","_jsxs","concat","handleContinueWithApple","console","log","FaApple","handleContinueWithGoogle","FcGoogle","schema","yup","shape","email","matches","required","password","min","confirmPassword","oneOf","RegistrationForm","_errors$email2","_errors$password2","_errors$confirmPasswo2","dispatch","useDispatch","navigate","useNavigate","formData","setFormData","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","errors","setErrors","validForm","setValidForm","useEffect","handleInputChange","e","_formData$email","_formData$password","_formData$confirmPass","_errors$email","_errors$password","_errors$confirmPasswo","name","value","target","length","handleTogglePassword","field","handleBlur","async","validateAt","prevErrors","validationError","message","getBorderColor","_Fragment","ToastContainer","onSubmit","preventDefault","validate","abortEarly","then","registerThunk","unwrap","Toastify","error","ToastError","catch","validationErrors","errorsMap","inner","forEach","path","inputContainer","errorText","inputForm","type","placeholder","onChange","onBlur","style","borderColor","color","src","alt","img_error","passwordInputContainer","passwordInput","eyeIcon","FaEyeSlash","FaEye","textInfo","spanPolicy","btn_text","btn_valid","Button","RegistrationPage","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme"],"sourceRoot":""}